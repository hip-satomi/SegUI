# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/README.html#stages

image: node:14.15-stretch
variables:
  FF_USE_FASTZIP: "true"
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"


cache:
  untracked: true
  policy: push
  key: ${CI_COMMIT_SHORT_SHA}
  paths:
    - node_modules/
    - www/

.pull_cached_node_modules:
  cache:
    untracked: true
    key: ${CI_COMMIT_SHORT_SHA}
    policy: pull

#  - setup
stages:
  - test

#install:
#  stage: setup
#  script:
#    - npm install
#    - npm install -g @angular/cli @ionic/cli
#    - ionic build

#build-docker:
#  stage: setup
#  image: docker:20.10.8
#  services:
#    - docker:20.10.8-dind
#  script:
#    - echo $CI_REGISTRY
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker pull $CI_REGISTRY/satomi/segtrackui/server:latest || true
#    - docker build --cache-from $CI_REGISTRY/satomi/segtrackui/server:latest -t $CI_REGISTRY/satomi/segtrackui/server:latest -t $CI_REGISTRY/satomi/segtrackui/server:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY/satomi/segtrackui/server:$CI_COMMIT_BRANCH -f docker/Dockerfile .
#    - docker push $CI_REGISTRY/satomi/segtrackui/server:$CI_COMMIT_SHORT_SHA
#    - docker push $CI_REGISTRY/satomi/segtrackui/server:$CI_COMMIT_BRANCH
#    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then docker push $CI_REGISTRY/satomi/segtrackui/server:latest; fi
    


test:
  stage: test
  extends: .pull_cached_node_modules
  before_script:
    - echo $CI_BUILDS_DIR
    - echo $PROJECT_FULL_PATH
    - apt-get update
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt install -y ./google-chrome*.deb;
    - export CHROME_BIN=/usr/bin/google-chrome
    - npm install -g @angular/cli @ionic/cli
    - npm install
  script:
    - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI --code-coverage
  artifacts:
      reports:
        cobertura: ./build/reports/coverage/cobertura.xml

#build-job:       # This job runs in the build stage, which runs first.
#  stage: build
#  extends: .pull_cached_node_modules
#  script:
#    - echo "Compiling the code..."
#    - npm install -g @angular/cli @ionic/cli
#    - ionic build
#    - echo "Compile complete."

#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"

#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."

#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
